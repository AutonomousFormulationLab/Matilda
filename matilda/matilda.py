# this file will process bunch of Flyscan data files.
# to run setup proper conda environment and run the following command:
# python processFlyscans.py
# this will process the data files and generate a plot of UPD vs. Q
# the test data files are located in the directory: ./TestData/TestSet/02_21_Megan_usaxs

from convertUSAXS import reduceFlyscanToQR, reduceStepScanToQR
from readfromtiled import FindLastScanData
from convertSAS import reduceADToQR
import matplotlib.pyplot as plt
import pprint as pp
import numpy as np
import socket
import logging
from logging.handlers import RotatingFileHandler
import time
import os
import datetime


# list of files will be generated as a list of lists
# each list will have two items: path and file name
# this will be used to process the data files  
# this is example of how the lists looks like:
# [['/share1/USAXS_data/2025-02/02_14_AMB4_800C/02_14_AMB4_800C_usaxs', 'AMB4_800C_71min_0564.h5'], 
#   ['/share1/USAXS_data/2025-02/02_14_AMB4_800C/02_14_AMB4_800C_usaxs', 'AMB4_800C_73min_0565.h5'], 
#  ]
# this list will be generated by the function below

BeruskaListOfFlyScans = [['./TestData/TestSet/02_21_Megan_usaxs','HeaterBlank_0060.h5'],
               ['./TestData/TestSet/02_21_Megan_usaxs','PPOH_225C_3_0069.h5'],
               ['./TestData/TestSet/02_21_Megan_usaxs','PPOH_25C_orig_0066.h5'],
               ['./TestData/TestSet/02_21_Megan_usaxs','PU_25C_2_0063.h5'],
               ['./TestData/TestSet/02_21_Megan_usaxs','PPOH_25C_2_0068.h5'],
               ['./TestData/TestSet/02_21_Megan_usaxs','PU_225C_1_0062.h5'],
               ['./TestData/TestSet/02_21_Megan_usaxs','PU_25C_4_0065.h5'],
               ['./TestData/TestSet/02_21_Megan_usaxs','PPOH_225C_1_0067.h5'],
            ] 

BeruskaListOfStepScans = [['./TestData/TestSet/step','AirBlank_300pts_0110.h5'],
                ['./TestData/TestSet/step','AirBlank_300pts_0111.h5'],
                ['./TestData/TestSet/step','AirBlank_300pts_0113.h5'],
                ['./TestData/TestSet/step','SRM3607_300pts_0097.h5'],
                ['./TestData/TestSet/step','SRM3607_300pts_0098.h5'],
                ['./TestData/TestSet/step','SRM3607_300pts_0099.h5'],
            ]

BeruskaListOfSAXSScans = [['./TestData/TestSet/02_21_Megan_saxs','HeaterBlank_0060.hdf'],
               ['./TestData/TestSet/02_21_Megan_saxs','PPOH_225C_3_0069.hdf'],
               ['./TestData/TestSet/02_21_Megan_saxs','PPOH_25C_orig_0066.hdf'],
               ['./TestData/TestSet/02_21_Megan_saxs','PU_25C_2_0063.hdf'],
               ['./TestData/TestSet/02_21_Megan_saxs','PPOH_25C_2_0068.hdf'],
               ['./TestData/TestSet/02_21_Megan_saxs','PU_225C_1_0062.hdf'],
               ['./TestData/TestSet/02_21_Megan_saxs','PU_25C_4_0065.hdf'],
               ['./TestData/TestSet/02_21_Megan_saxs','PPOH_225C_1_0067.hdf'],
            ] 

BeruskaListOfWAXSScans = [['./TestData/TestSet/02_21_Megan_waxs','HeaterBlank_0060.hdf'],
               ['./TestData/TestSet/02_21_Megan_waxs','PPOH_225C_3_0069.hdf'],
               ['./TestData/TestSet/02_21_Megan_waxs','PPOH_25C_orig_0066.hdf'],
               ['./TestData/TestSet/02_21_Megan_waxs','PU_25C_2_0063.hdf'],
               ['./TestData/TestSet/02_21_Megan_waxs','PPOH_25C_2_0068.hdf'],
               ['./TestData/TestSet/02_21_Megan_waxs','PU_225C_1_0062.hdf'],
               ['./TestData/TestSet/02_21_Megan_waxs','PU_25C_4_0065.hdf'],
               ['./TestData/TestSet/02_21_Megan_waxs','PPOH_225C_1_0067.hdf'],
            ] 

#print(f"List of Scans: {ListOfScans=}")
#ListOfTiledScans = FindLastFSdata()
#print(f"List of Flyscans: {ListOfTiledScans=}")


# Configure logging
# Get the directory of the current script
script_dir = os.path.dirname(os.path.abspath(__file__))
# Define the log directory path
log_dir = os.path.join(script_dir, 'log')
# Create the log directory if it doesn't exist
os.makedirs(log_dir, exist_ok=True)
# Define the log file path
log_file = os.path.join(log_dir, 'matilda.log')
handler = RotatingFileHandler(log_file, maxBytes=200000, backupCount=1)
logging.basicConfig(
    handlers=[handler],
    level=logging.INFO,        # Set the logging level
    format='%(asctime)s - %(levelname)s - %(message)s',  # Format of the log messages
    datefmt='%Y-%m-%d %H:%M:%S'  # Date format
)

# # Log messages
# logging.debug('This is a debug message')
# logging.info('This is an info message')
# logging.warning('This is a warning message')
# logging.error('This is an error message')
# logging.critical('This is a critical message')


# define any globals here
default_plt_font_size = 7



def GetListOfScans(plan_name):
    #Get the hostname of the current machine
    current_hostname = socket.gethostname()
    #print(f"Current hostname: {current_hostname}")
    logging.info(f"Current hostname: {current_hostname}")

    # Check if the current machine is 'usaxscontrol.xray.aps.anl.gov'
    if current_hostname == 'usaxscontrol.xray.aps.anl.gov':
        # print("Executing code on usaxscontrol.xray.aps.anl.gov")
        # logging.info('Executing code on usaxscontrol.xray.aps.anl.gov')
        #these are calls to get last 10 scans for Flyscan, step scan, SAXS, and WAXS
        #print (FindLastScanData("Flyscan",10))
        #print (FindLastScanData("uascan",10))
        #print (FindLastScanData("SAXS",10))
        #print (FindLastScanData("WAXS",10))
        return FindLastScanData(plan_name,10)
    else:
        if plan_name == 'SAXS':
            return BeruskaListOfSAXSScans
        elif plan_name == 'WAXS':
            return BeruskaListOfWAXSScans
        elif plan_name == 'uascan':
            return BeruskaListOfStepScans
        else:               #flyscans are default
            return BeruskaListOfFlyScans


    
# Here we process different types of scans
# Process the Flyscan data files
def processFlyscans(ListOfScans):
    results=[]
    for scan in ListOfScans:
        path = scan[0]
        filename = scan[1]
        #print(f"Processing file: {filename}")
        try:
            results.append(reduceFlyscanToQR(path, filename))
        except:
            pass
    #print("Done processing the Flyscans")
    return results

# Process the step scan data files
def processStepscans(ListOfScans):
    results=[]
    for scan in ListOfScans:
        path = scan[0]
        filename = scan[1]
        #print(f"Processing file: {filename}")
        try:
            results.append(reduceStepScanToQR(path, filename))
        except:
            pass
    #print("Done processing the Step scans")
    return results

# Process SAXS and WAXS data files
def processSASdata(ListOfScans):
    results=[]
    for scan in ListOfScans:
        path = scan[0]
        filename = scan[1]
        #print(f"Processing file: {filename}")
        try:
            results.append(reduceADToQR(path, filename))
        except:
            pass
    #print("Done processing the AD data")
    return results
 
def plotUSAXSResults(ListOfresults, isFlyscan=True):  
    # Number of data sets
    num_data_sets = len(ListOfresults)
    # Choose a colormap
    cmap = plt.get_cmap('viridis')
    # Generate colors from the colormap
    colors = [cmap(i) for i in np.linspace(0, 1, num_data_sets)]

    # Set the font size to specific size
    plt.rcParams['font.size'] = default_plt_font_size

    # Plot ydata against xdata
    plt.figure(figsize=(6, 6))
    for i, color in zip(range(len(ListOfresults)),colors):
        data_dict = ListOfresults[i]
        label = data_dict["RawData"]["Filename"]
        Q_array = data_dict["reducedData"]["Q_array"]
        UPD = data_dict["reducedData"]["PD_intensity"]
        plt.plot(Q_array, UPD, color=color, linestyle='-', label=label)  # You can customize the marker and linestyle
    
    plt.title('Plot of UPD vs. Q')
    plt.xlabel('log(Q) [1/A]')
    plt.ylabel('UPD')
    plt.xscale('log')
    plt.yscale('log')
    plt.xlim(1e-5, 1)
    plt.grid(True)
    # Add legend
    plt.legend()
    # Save the plot as a JPEG image
    current_hostname = socket.gethostname()
    if current_hostname == 'usaxscontrol.xray.aps.anl.gov':
        if isFlyscan:
            plt.savefig('/home/joule/WEBUSAXS/www_live/usaxs.jpg', format='jpg', dpi=300)
        else:
            plt.savefig('/home/joule/WEBUSAXS/www_live/stepusaxs.jpg', format='jpg', dpi=300) # this step scan
        plt.close()
    else:
        if isFlyscan:
            plt.savefig('usaxs.jpg', format='jpg', dpi=300)
        else:
            plt.savefig('stepusaxs.jpg', format='jpg', dpi=300) # this step scan
        plt.show()

def plotSWAXSResults(ListOfresults, isSAXS = True):  
    # Number of data sets
    num_data_sets = len(ListOfresults)
    # Choose a colormap
    cmap = plt.get_cmap('viridis')
    # Generate colors from the colormap
    colors = [cmap(i) for i in np.linspace(0, 1, num_data_sets)]

    # Set the font size to specific size
    plt.rcParams['font.size'] = default_plt_font_size 

    # Plot ydata against xdata
    plt.figure(figsize=(6, 6))
    for i, color in zip(range(len(ListOfresults)),colors):
        data_dict = ListOfresults[i]
        label = data_dict["RawData"]["Filename"]
        Q_array = data_dict["reducedData"]["Q_array"]
        UPD = data_dict["reducedData"]["Intensity"]
        plt.plot(Q_array, UPD, color=color, linestyle='-', label=label)  # You can customize the marker and linestyle
    plt.ylabel('Intensity')   
    if isSAXS:
        plt.title('Plot of SAXS Intensity vs. Q')   
        plt.xlabel('log(Q) [1/A]')
        plt.xscale('log')
        plt.yscale('log')
        #plt.xlim(1e-5, 1)
        plt.grid(True)
        # Add legend
        plt.legend()
        current_hostname = socket.gethostname()
        if current_hostname == 'usaxscontrol.xray.aps.anl.gov':
            plt.savefig('/home/joule/WEBUSAXS/www_live/saxs.jpg', format='jpg', dpi=300)
            plt.close()
        else:
            plt.savefig('saxs.jpg', format='jpg', dpi=300)
        plt.show()
    else:
        plt.title('Plot of WAXS Intensity vs. Q')   
        plt.xlabel('Q [1/A]')
        plt.xscale('linear')
        plt.yscale('linear')        
        #plt.xlim(1e-5, 1)
        plt.grid(True)
        # Add legend
        plt.legend()
        # Save the plot as a JPEG image
        current_hostname = socket.gethostname()
        if current_hostname == 'usaxscontrol.xray.aps.anl.gov':
            plt.savefig('/home/joule/WEBUSAXS/www_live/waxs.jpg', format='jpg', dpi=300)
            plt.close()
        else:
            plt.savefig('waxs.jpg', format='jpg', dpi=300)
        plt.show()


if __name__ == "__main__":
    # this has been shown to work
    try:
        while True:
            logging.info("New round of processing started at : %s", datetime.datetime.now()) 
            #print("New round of processing started at : ", datetime.datetime.now()) 
            logging.info('Processing the Flyscans')
            #print("Processing the Flyscans")
            ListOfScans = GetListOfScans("Flyscan")
            ListOfresults = processFlyscans(ListOfScans)
            logging.info(f'Got list : {ListOfScans}')
            if len(ListOfresults) > 0:
                plotUSAXSResults(ListOfresults,isFlyscan=True)
            else:
                logging.info('No Flyscan data found')

            logging.info('Processing the step scans')
            #print("Processing the Stepscans")
            ListOfScans = GetListOfScans("uascan")
            ListOfresults = processStepscans(ListOfScans)
            if len(ListOfresults) > 0:
                plotUSAXSResults(ListOfresults,isFlyscan=False)
            else:
                logging.info('No Step scan data found') 

            #print("Done processing the Step scans")
            #print("Processing the SAXS scans")
            logging.info('Processing the SAXS')
            ListOfScans = GetListOfScans("SAXS")
            ListOfresults = processSASdata(ListOfScans)
            if len(ListOfresults) > 0:
                plotSWAXSResults(ListOfresults,isSAXS = True)
            else:
                logging.info('No SAXS data found')
               
            #print("Processing the WAXS scans")
            logging.info('Processing the WAXS')
            ListOfScans = GetListOfScans("WAXS")
            ListOfresults = processSASdata(ListOfScans)
            if len(ListOfresults) > 0:
                plotSWAXSResults(ListOfresults, isSAXS = False)
            else:
                logging.info('No WAXS data found')

            # wait for more data, 30s seems reasonable
            time.sleep(30)
    except KeyboardInterrupt:
        print("Keyboard interrupt")
